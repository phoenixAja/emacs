
;; init.el --- Emacs configuration

;; INSTALL PACKAGES
;; --------------------------------------

(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :ensure t
  :config
  (exec-path-from-shell-initialize))

(use-package go-mode
  :ensure t)

(use-package company
  :init (global-company-mode)
  :config
  (progn
    ;; (bind-key (kbd "C-TAB") #'company-complete company-mode-map)

    (add-to-list 'company-backends 'company-irony 'company-jedi)
    (setq jedi:setup-keys t)
    (setq jedi:complete-on-dot t)
    (add-hook 'python-mode-hook 'jedi:setup)))


(use-package ob-async
  :ensure t)
(use-package ivy
 :config
 (progn
   (ivy-mode 1)
   (setq ivy-use-virtual-buffers t)
   (setq ivy-count-format "(%d/%d) ")
   (global-set-key (kbd "C-c C-r") 'ivy-resume)))
(use-package swiper
  :ensure t
  :config
   (global-set-key (kbd "C-s") 'swiper))
(use-package counsel
  :ensure t
  :config
  (progn
   (global-set-key (kbd "M-x") 'counsel-M-x)
   (global-set-key (kbd "C-x C-f") 'counsel-find-file)
   (global-set-key (kbd "<f1> f") 'counsel-describe-function)
   (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
   (global-set-key (kbd "<f1> l") 'counsel-find-library)
   (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
   (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
   (global-set-key (kbd "C-c g") 'counsel-git)
   (global-set-key (kbd "C-c j") 'counsel-git-grep)
   (global-set-key (kbd "C-c k") 'counsel-ag)
   (global-set-key (kbd "C-x l") 'counsel-locate)
   (global-set-key (kbd "M-y") 'counsel-yank-pop)
   (global-set-key (kbd "C-c C-SPC") 'counsel-mark-ring)))
(use-package magit
  :ensure t
  :config
  (progn
    (global-set-key (kbd "C-x g") 'magit-status))
  (setq magit-completing-read-function 'ivy-completing-read))
(use-package elpy
  :ensure t
  :config
  (progn
  (global-set-key (kbd "C-TAB") 'elpy-company-backend))
  (elpy-enable))


;; BASIC CUSTOMIZATION
;; --------------------------------------


(setq inhibit-startup-message t) ;; hide the startup message
(load-theme 'material t) ;; load material theme
(global-linum-mode t) ;; enable line numbers globally

(tool-bar-mode -1)
(scroll-bar-mode -1)

(setq c-default-style "stroustrup")

(setq tab-width 4)
(setq indent-tabs-mode nil)


(setq mac-option-key-is-meta nil) ;; mac keybindings
(setq mac-command-key-is-meta t)
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil)

(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
  backup-by-copying t    ; Don't delink hardlinks
  version-control t      ; Use version numbers on backups
  delete-old-versions t  ; Automatically delete excess backups
  kept-new-versions 20   ; how many of the newest versions to keep
  kept-old-versions 5    ; and how many of the old
  )

(setq doc-view-continuous t)

;; override text color in ansi-term
(add-hook 'shell-mode-hook
      (lambda ()
        (face-remap-set-base 'comint-highlight-prompt :inherit nil)))

;; PYTHON CONFIGURATION
;; --------------------------------------

(setq python-shell-interpreter "jupyter"
      python-shell-interpreter-args "console --simple-prompt"
      python-shell-prompt-detect-failure-warning nil)
(add-to-list 'python-shell-completion-native-disabled-interpreters
             "jupyter")


;; EXTENDED PACKAGE CONFIG
;; ----------------------------------------


(defvar ansi-color-names-vector
  ["#101010" "#803030" "#4b762f" "#aa9943"
   "#324c80" "#a06c9a" "#82b4ae" "#ededed"])

;; Ugly hack to avoid warnings that ansi-color-make-color-map is not defined.
(eval-when-compile (defun ansi-color-make-color-map ()))

;;; make the shell beautifull
;; (eval-after-load 'shell
;;    '(progn
;      (setenv "ESHELL" (expand-file-name "~/bin/eshell"))
;      (defvar ansi-color-map (ansi-color-make-color-map))))

;;; make the term beautifull
;; order of colours is wrong?
(eval-after-load 'term
  '(progn
     (let ((term-face-names (vector 'term-color-black
            'term-color-red
            'term-color-green
            'term-color-yellow
            'term-color-blue
            'term-color-magenta
            'term-color-cyan
            'term-color-white
            'term))
     (term-color-names (vconcat ansi-color-names-vector ["#d2dec4"])))
       (set-face-background 'term 'nil)
       (cl-mapc 'set-face-foreground term-face-names term-color-names)
       (custom-set-variables
  '(term-default-bg-color "#000000")
  '(term-default-fg-color "#dddd00")))))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#D3D7CF" "#cc0000" "#4E9A06" "#C4A000" "#3465A4" "#75507B" "#06989A" "#000000"])
 '(custom-enabled-themes (quote (gruvbox-dark-medium)))
 '(custom-safe-themes
   (quote
    ("a24c5b3c12d147da6cef80938dca1223b7c7f70f2f382b26308eba014dc4833a" "732b807b0543855541743429c9979ebfb363e27ec91e82f463c91e68c772f6e3" "585942bb24cab2d4b2f74977ac3ba6ddbd888e3776b9d2f993c5704aa8bb4739" "8f97d5ec8a774485296e366fdde6ff5589cf9e319a584b845b6f7fa788c9fa9a" "a22f40b63f9bc0a69ebc8ba4fbc6b452a4e3f84b80590ba0a92b4ff599e53ad0" default)))
 '(fci-rule-color "#37474f")
 '(hl-sexp-background-color "#1c1f26")
 '(org-agenda-files
   (quote
    ("~/org/spid_benchmarking.org" "~/org/todo.org" "~/org/org_tutorial.org")))
 '(package-selected-packages
   (quote
    (xref-js2 emmet-mode tide web-mode multi-web-mode eglot pyenv-mode-auto pyenv-mode company-jedi jedi zpresent csv-mode racer company-anaconda undo-propose auto-org-md cython-mode yaml-mode markdown-mode rust-mode dockerfile-mode jupyter groovy-mode expand-region dashboard treemacs-magit treemacs-icons-dired treemacs-projectile treemacs-evil treemacs minimap use-package py-autopep8 ob-async material-theme magit gruvbox-theme go-mode flycheck exec-path-from-shell elpygen elpy ein counsel better-defaults)))
 '(term-default-bg-color "#000000")
 '(term-default-fg-color "#dddd00")
 '(vc-annotate-background nil)
 '(vc-annotate-color-map
   (quote
    ((20 . "#f36c60")
     (40 . "#ff9800")
     (60 . "#fff59d")
     (80 . "#8bc34a")
     (100 . "#81d4fa")
     (120 . "#4dd0e1")
     (140 . "#b39ddb")
     (160 . "#f36c60")
     (180 . "#ff9800")
     (200 . "#fff59d")
     (220 . "#8bc34a")
     (240 . "#81d4fa")
     (260 . "#4dd0e1")
     (280 . "#b39ddb")
     (300 . "#f36c60")
     (320 . "#ff9800")
     (340 . "#fff59d")
     (360 . "#8bc34a"))))
 '(vc-annotate-very-old-color nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )


;; treemacs is a package for displaying directory structure within emacs
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if (executable-find "python") 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         40)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)


;; show startup screen showing recent activity
(require 'dashboard)
(dashboard-setup-startup-hook)
;; Or if you use use-package
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))

;; sublime style minimap
;; (require 'sublimity)
;;  (require 'sublimity-scroll)
;;  (require 'sublimity-map) ;; experimental
;;  (require 'sublimity-attractive)
;; (sublimity-mode 1)

(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)

;; Racer Rust completions
(add-hook 'racer-mode-hook #'company-mode)

(require 'rust-mode)
(define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
(setq company-tooltip-align-annotations t)

(put 'upcase-region 'disabled nil)

;; org mode stuff
(require 'org)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
;; files to scan for the agenda
(setq org-agenda-files (list "~/org/todo.org"
			     "~/org/org_tutorial.org"
			     ))

;; set key for agenda

;;set priority range from A to C with default A
(setq org-highest-priority ?A)
(setq org-lowest-priority ?C)
(setq org-default-priority ?A)

;;set colours for priorities
(setq org-priority-faces '((?A . (:foreground "#F0DFAF" :weight bold))
                           (?B . (:foreground "LightSteelBlue"))
                           (?C . (:foreground "OliveDrab"))))

;;open agenda in current window
;; (setq org-agenda-window-setup (quote current-window))

;;capture todo items using C-c c t
(define-key global-map (kbd "C-c c") 'org-capture)
(setq org-capture-templates
      '(("t" "todo" entry (file+headline "~/org/todo.org" "Tasks")
         "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n")))


(projectile-mode +1)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

(autoload 'jedi:setup "jedi" nil t)
(add-hook 'python-mode-hook 'jedi:setup)

;; (python-mode)
(pyenv-mode)
(eval-after-load 'pyenv-mode
  '(progn
     (define-key pyenv-mode-map (kbd "C-c C-s") nil)
     (define-key pyenv-mode-map (kbd "C-M-s") 'pyenv-mode-set)))

;; Images
(setq org-image-actual-width nil)


;; js/web mode
;; (add-to-list 'auto-mode-alist '("\\.jsx?$" . web-mode)) ;; auto-enable for .js/.jsx files
;; (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
;; (defun web-mode-init-hook ()
;;   "Hooks for Web mode.  Adjust indent."
;;   (setq web-mode-markup-indent-offset 2))
  
;; (add-hook 'web-mode-hook  'web-mode-init-hook)

;; (add-hook 'after-init-hook #'global-flycheck-mode)


;; emmet mode
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
(add-hook 'emmet-mode-hook (lambda () (setq emmet-indent-after-insert nil)))
(add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2))) ;; indent 2 spaces.
(setq emmet-expand-jsx-className? t) ;; default nil


;; web mode
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

(defun my-web-mode-hook ()
  "Hooks for Web mode."
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
)
(add-hook 'web-mode-hook  'my-web-mode-hook)


;; xref-js2
(define-key js2-mode-map (kbd "M-.") nil)

;; add xref backend
(add-hook 'js2-mode-hook (lambda ()
  (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))


;; (require 'flycheck)
;; (setq-default flycheck-disabled-checkers
;;               (append flycheck-disabled-checkers
;;                       '(javascript-jshint json-jsonlist)))

;; ;; Enable eslint checker for web-mode
;; (flycheck-add-mode 'javascript-eslint 'web-mode)
;; ;; Enable flycheck globally
;; (add-hook 'after-init-hook #'global-flycheck-mode)
;; (add-hook 'flycheck-mode-hook 'add-node-modules-path)

;; (defun web-mode-init-prettier-hook ()
;;   (add-node-modules-path)
;;   (prettier-js-mode))

;; (add-hook 'web-mode-hook  'web-mode-init-prettier-hook)

